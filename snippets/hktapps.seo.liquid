<script>
    var HKTSeoApps = HKTSeoApps || {};
    {% if customer %}
    HKTSeoApps.customerId = "{{ customer.id }}"
    HKTSeoApps.customerEmail = "{{ customer.email }}"
    {% endif %}
    HKTSeoApps.theme = "{{ theme.name }}";

    function hktappsMakeRequest(url, method = 'GET', data = null) {
        // Create the XHR request
        const request = new XMLHttpRequest();

        // Return it as a Promise
        return new Promise(function(resolve, reject) {
            // Setup our listener to process completed requests
            request.onreadystatechange = function() {
                // Only run if the request is complete
                if (request.readyState !== 4) return;

                // Process the response
                if (
                    request.status >= 200 &&
                    request.status < 300 &&
                    request.status !== 204
                ) {
                    resolve(JSON.parse(request.responseText));
                } else {
                    // If failed
                    // eslint-disable-next-line prefer-promise-reject-errors
                    reject({
                        status: request.status,
                        statusText: request.statusText
                    });
                }
            };

            // Setup our HTTP request
            request.open(method, url, true);

            // Send the request
            if (data) {
                request.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
                request.send(JSON.stringify(data));
            } else {
                request.send(data);
            }
        });
    }
    (function(funcName, baseObj) {
        // The public function name defaults to window.docReady
        // but you can pass in your own object and own function name and those will be used
        // if you want to put them in a different namespace
        funcName = funcName || "docReady";
        baseObj = baseObj || window;
        var readyList = [];
        var readyFired = false;
        var readyEventHandlersInstalled = false;

        // call this when the document is ready
        // this function protects itself against being called more than once
        function ready() {
            if (!readyFired) {
                // this must be set to true before we start calling callbacks
                readyFired = true;
                for (var i = 0; i < readyList.length; i++) {
                    // if a callback here happens to add new ready handlers,
                    // the docReady() function will see that it already fired
                    // and will schedule the callback to run right after
                    // this event loop finishes so all handlers will still execute
                    // in order and no new ones will be added to the readyList
                    // while we are processing the list
                    readyList[i].fn.call(window, readyList[i].ctx);
                }
                // allow any closures held by these functions to free
                readyList = [];
            }
        }

        function readyStateChange() {
            if ( document.readyState === "complete" ) {
                ready();
            }
        }

        // This is the one public interface
        // docReady(fn, context);
        // the context argument is optional - if present, it will be passed
        // as an argument to the callback
        baseObj[funcName] = function(callback, context) {
            if (typeof callback !== "function") {
                throw new TypeError("callback for docReady(fn) must be a function");
            }
            // if ready has already fired, then just schedule the callback
            // to fire asynchronously, but right away
            if (readyFired) {
                setTimeout(function() {callback(context);}, 1);
                return;
            } else {
                // add the function and context to the list
                readyList.push({fn: callback, ctx: context});
            }
            // if document already ready to go, schedule the ready function to run
            if (document.readyState === "complete") {
                setTimeout(ready, 1);
            } else if (!readyEventHandlersInstalled) {
                // otherwise if we don't have event handlers installed, install them
                if (document.addEventListener) {
                    // first choice is DOMContentLoaded event
                    document.addEventListener("DOMContentLoaded", ready, false);
                    // backup is window load event
                    window.addEventListener("load", ready, false);
                } else {
                    // must be IE
                    document.attachEvent("onreadystatechange", readyStateChange);
                    window.attachEvent("onload", ready);
                }
                readyEventHandlersInstalled = true;
            }
        }
    })("hktappsDocReady", window);
</script>
{% capture snippet_amp_variable %}{% include 'hktapps.seo.amp.variable' %}{% endcapture %}
{% capture snippet_amp_collection_status %}{% include 'hktapps.seo.amp.collection.status' %}{% endcapture %}
{% capture snippet_amp_product_status %}{% include 'hktapps.seo.amp.product.status' %}{% endcapture %}
{% capture snippet_amp_blog_status %}{% include 'hktapps.seo.amp.blog.status' %}{% endcapture %}
{% capture snippet_amp_blog_post_status %}{% include 'hktapps.seo.amp.blog-post.status' %}{% endcapture %}
{% capture snippet_amp_page_status %}{% include 'hktapps.seo.amp.page.status' %}{% endcapture %}

{% capture snippet_breadcrumb_status %}{% include 'hktapps.seo.breadcrumb.status' %}{% endcapture %}
{% capture snippet_meta_tag_status %}{% include 'hktapps.seo.meta-tag.status' %}{% endcapture %}
{% capture snippet_instant_page_status %}{% include 'hktapps.seo.instant-page.status' %}{% endcapture %}
{% capture snippet_404_page_status %}{% include 'hktapps.seo.404-page.status' %}{% endcapture %}
{% capture snippet_jsonld_status %}{% include 'hktapps.seo.json-ld.status' %}{% endcapture %}
{% capture snippet_sitelink_status %}{% include 'hktapps.seo.sitelink.status' %}{% endcapture %}
{% capture snippet_organize_status %}{% include 'hktapps.seo.organize.status' %}{% endcapture %}
{% capture snippet_new_tab_external_status %}{% include 'hktapps.seo.new-tab-external.status' %}{% endcapture %}
{% capture snippet_track_link_click_status %}{% include 'hktapps.seo.track-link-click.status' %}{% endcapture %}
{% capture snippet_local_seo_status %}{% include 'hktapps.seo.local-seo.status' %}{% endcapture %}

{% unless snippet_amp_variable contains 'Liquid error' %}
    {% include 'hktapps.seo.amp.variable' %}
{% endunless %}

{% unless snippet_amp_collection_status contains 'Liquid error' %}
    {% include 'hktapps.seo.amp.collection.status' %}
    {%- if hktappsSeoAmpCollectionStatus -%}
        {% include 'hktapps.seo.amp.collection.content' %}
    {%- endif -%}
{% endunless %}

{% unless snippet_amp_product_status contains 'Liquid error' %}
    {% include 'hktapps.seo.amp.product.status' %}
    {%- if hktappsSeoAmpProductStatus -%}
        {% include 'hktapps.seo.amp.product.content' %}
    {%- endif -%}
{% endunless %}

{% unless snippet_amp_blog_status contains 'Liquid error' %}
    {% include 'hktapps.seo.amp.blog.status' %}
    {%- if hktappsSeoAmpBlogStatus -%}
        {% include 'hktapps.seo.amp.blog.content' %}
    {%- endif -%}
{% endunless %}

{% unless snippet_amp_blog_post_status contains 'Liquid error' %}
    {% include 'hktapps.seo.amp.blog-post.status' %}
    {%- if hktappsSeoAmpBlogPostStatus -%}
        {% include 'hktapps.seo.amp.blog-post.content' %}
    {%- endif -%}
{% endunless %}

{% unless snippet_amp_page_status contains 'Liquid error' %}
    {% include 'hktapps.seo.amp.page.status' %}
    {%- if hktappsSeoAmpPageStatus -%}
        {% include 'hktapps.seo.amp.page.content' %}
    {%- endif -%}
{% endunless %}

{% unless snippet_breadcrumb_status contains 'Liquid error' %}
    {% include 'hktapps.seo.breadcrumb.status' %}
    {%- if hktappsSeoBreadcrumbStatus -%}
        {% include 'hktapps.seo.breadcrumb.content' %}
    {%- endif -%}
{% endunless %}

{% unless snippet_meta_tag_status contains 'Liquid error' %}
    {% include 'hktapps.seo.meta-tag.status' %}
    {%- if hktappsSeoMetaTagStatus -%}
        {% include 'hktapps.seo.meta-tag.content' %}
    {%- endif -%}
{% endunless %}

{% unless snippet_instant_page_status contains 'Liquid error' %}
    {% include 'hktapps.seo.instant-page.status' %}
    {%- if hktappsSeoInstantPageStatus -%}
        {% include 'hktapps.seo.instant-page.content' %}
    {%- endif -%}
{% endunless %}

{% unless snippet_404_page_status contains 'Liquid error' %}
    {% include 'hktapps.seo.404-page.status' %}
    {%- if hktappsSeo404PageStatus -%}
        {% include 'hktapps.seo.404-page.content' %}
    {%- endif -%}
{% endunless %}


{% unless snippet_jsonld_status contains 'Liquid error' %}
    {% include 'hktapps.seo.json-ld.status' %}
    {%- if hktappsSeoJsonLdStatus -%}
        {% include 'hktapps.seo.json-ld.content' %}
    {%- endif -%}
{% endunless %}


{% unless snippet_sitelink_status contains 'Liquid error' %}
    {% include 'hktapps.seo.sitelink.status' %}
    {%- if hktappsSeoSiteLinkStatus -%}
        {% include 'hktapps.seo.sitelink.content' %}
    {%- endif -%}
{% endunless %}

{% unless snippet_organize_status contains 'Liquid error' %}
    {% include 'hktapps.seo.organize.status' %}
    {%- if hktappsSeoOrganizeStatus -%}
        {% include 'hktapps.seo.organize.content' %}
    {%- endif -%}
{% endunless %}

{% unless snippet_new_tab_external_status contains 'Liquid error' %}
{% include 'hktapps.seo.new-tab-external.status' %}
{%- if hktappsSeoNewTabExternalStatus -%}
{% include 'hktapps.seo.new-tab-external.content' %}
{%- endif -%}
{% endunless %}

{% unless snippet_track_link_click_status contains 'Liquid error' %}
{% include 'hktapps.seo.track-link-click.status' %}
{%- if hktappsSeoTrackLinkClickStatus -%}
{% include 'hktapps.seo.track-link-click.content' %}
{%- endif -%}
{% endunless %}

{% unless snippet_local_seo_status contains 'Liquid error' %}
{% include 'hktapps.seo.local-seo.status' %}
{%- if hktappsSeoLocalSeoStatus -%}
{% include 'hktapps.seo.local-seo.content' %}
{%- endif -%}
{% endunless %}

{% unless snippet_preloader_status contains 'Liquid error' %}
{% include 'hktapps.seo.preloader.status' %}
{%- if hktappsSeoPreloaderStatus -%}
{% include 'hktapps.seo.preloader.content' %}
{%- endif -%}
{% endunless %}
